import React,{useState} from 'react'
import { Link, useNavigate } from 'react-router-dom'
import { login as storeLogin } from '../store/authSlice' //syntax of how to import as some-other-name
import { useDispatch } from 'react-redux'
import { Button, Input, Logo } from './index'
import authService from '../appwrite/Auth'
import { useForm } from 'react-hook-form'  // OUR MAIN BOI ....this component is kinda an tutorial for it


//this is NOT the login page, but mere an login component, reusable, just like others
function Login() {
  const navigate = useNavigate()
  const dispatch = useDispatch()
  const [error, setError] = useState("")    //usestate to handle and display errors

  const { register, handleSubmit } = useForm()
  /**main boi, returns two things 
   * handleSubmit is a method in itself, where we give our own method to handle the onSubmit of a form 
   * so handleSubmit(treated as keyword by community) is kindof an event itself   
   * register manages the state of all the inputs within the form automatically and provides them while submitting
  */


  //method to lgin user, it takes "data" as parameter
  //this "data" is generated by the register of useForm when we link this method via the "handleSubmit"
  const login = async (data) => {
    setError("")        //good practices
    try {
      const session = await authService.login(data)  
      // it just returns a session(promise) via createEmailSession NOT the actual data
      // requires email and password, hence 2 inputs
      if (session) {
        const userData = await authService.getCurrentUser()   //get actual userdata
        if (userData) {
          dispatch(storeLogin(userData))  //update the store
          navigate("/")       //diff bet link and navigate...you have to click the link to redirect to URL, 
        }
      }
      //with navigate, we can redirect progamatically
    } catch (error) {
      setError(error.message)  // error.message gives a srring error to render in UI
    }
  }
  return (
    <div className='flex items-center justify-center w-full'  >
      <div className={`mx-auto w-full max-w-lg bg-gray-100 rounded-xl p-10 border border-black/10 shadow-lg `}>
        <div className="mb-2 flex justify-center">
          <span className="inline-block w-full max-w-[100px]">
            <Logo width="100%" />
          </span>
        </div>
        <h2 className="text-center text-2xl font-bold leading-tight">Sign in to your account</h2>
        <p className="mt-2 text-center text-base text-black/60">
          Don&apos;t have any account?&nbsp;
          <Link to="/signup" className="font-medium text-primary transition-all duration-200 hover:underline" >
            Sign Up
          </Link>
        </p>
        {error && <p className="text-red-600 mt-8 text-center"> {error} </p>}
        <form onSubmit={handleSubmit(login)} className='mt-8'> {/*  passing "login"(ouw way of handling form to "handleSubmit")*/}
          <div className='space-y-5'>
            {/* our own Input component 
              syntax : {...register("key",{objects})}
              the weird way to write the register...DONT FORGET TO SPREAD IT ELSE IT WILL OVERWRITE ELSEWHERE
              "key" must be unique for input and is the basis on which data is generated and kept in register 
               whereas "objects" are not necessary ... "validate"-object is the syntax as per documentation and "matchPattern" ia a regular expression (used here to validate email)
              */}
            <Input
              label="Email: "
              placeholder="Enter your email"
              type="email"
              {...register("email", {
                required: true,
                validate: {
                  matchPatern: (value) => /^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/.test(value) ||
                    "Email address must be a valid address",
                }
              })}
            />
            <Input
              label="Password: "
              type="password"
              placeholder="Enter your password"
              {...register("password", {
                required: true,
              })}
            />
            <Button
              type="submit"
              className="w-full "
            >Sign in</Button>
          </div>
        </form>
      </div>
    </div>
  )
}

export default Login